// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "object":
			easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain1(in, &out.Object)
		case "group_id":
			out.GroupId = int32(in.Int32())
		case "event_id":
			out.EventId = string(in.String())
		case "secret":
			out.Secret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix)
		easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain1(out, in.Object)
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.GroupId))
	}
	{
		const prefix string = ",\"event_id\":"
		out.RawString(prefix)
		out.String(string(in.EventId))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain(l, v)
}
func easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain1(in *jlexer.Lexer, out *Object) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain2(in, &out.Message)
		case "ClientInfo":
			easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain3(in, &out.ClientInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain1(out *jwriter.Writer, in Object) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain2(out, in.Message)
	}
	{
		const prefix string = ",\"ClientInfo\":"
		out.RawString(prefix)
		easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain3(out, in.ClientInfo)
	}
	out.RawByte('}')
}
func easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain3(in *jlexer.Lexer, out *ClientInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ButtonActions":
			if in.IsNull() {
				in.Skip()
				out.ButtonActions = nil
			} else {
				in.Delim('[')
				if out.ButtonActions == nil {
					if !in.IsDelim(']') {
						out.ButtonActions = make([]string, 0, 4)
					} else {
						out.ButtonActions = []string{}
					}
				} else {
					out.ButtonActions = (out.ButtonActions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ButtonActions = append(out.ButtonActions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Keyboard":
			out.Keyboard = bool(in.Bool())
		case "InlineKeyboard":
			out.InlineKeyboard = bool(in.Bool())
		case "LandId":
			out.LandId = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain3(out *jwriter.Writer, in ClientInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ButtonActions\":"
		out.RawString(prefix[1:])
		if in.ButtonActions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ButtonActions {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Keyboard\":"
		out.RawString(prefix)
		out.Bool(bool(in.Keyboard))
	}
	{
		const prefix string = ",\"InlineKeyboard\":"
		out.RawString(prefix)
		out.Bool(bool(in.InlineKeyboard))
	}
	{
		const prefix string = ",\"LandId\":"
		out.RawString(prefix)
		out.Int8(int8(in.LandId))
	}
	out.RawByte('}')
}
func easyjson3c9d2b01DecodeGithubComSepukaVkbotserverDomain2(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "date":
			out.Date = int32(in.Int32())
		case "from_id":
			out.FromId = int32(in.Int32())
		case "peer_id":
			out.PeerId = int32(in.Int32())
		case "out":
			out.Out = int32(in.Int32())
		case "text":
			out.Text = string(in.String())
		case "conversation_message_id":
			out.ConversationMessageId = int32(in.Int32())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.FwdMessages = nil
			} else {
				in.Delim('[')
				if out.FwdMessages == nil {
					if !in.IsDelim(']') {
						out.FwdMessages = make([]int, 0, 8)
					} else {
						out.FwdMessages = []int{}
					}
				} else {
					out.FwdMessages = (out.FwdMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.FwdMessages = append(out.FwdMessages, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "random_id":
			out.RandomId = int32(in.Int32())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]int, 0, 8)
					} else {
						out.Attachments = []int{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.Attachments = append(out.Attachments, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_hidden":
			out.IsHidden = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComSepukaVkbotserverDomain2(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int32(int32(in.Date))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.FromId))
	}
	{
		const prefix string = ",\"peer_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.PeerId))
	}
	{
		const prefix string = ",\"out\":"
		out.RawString(prefix)
		out.Int32(int32(in.Out))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"conversation_message_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.ConversationMessageId))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		out.RawString(prefix)
		if in.FwdMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.FwdMessages {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"random_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.RandomId))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attachments {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_hidden\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHidden))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	out.RawByte('}')
}
