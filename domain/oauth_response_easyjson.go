// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson498abbe1DecodeGithubComSepukaVkbotserverDomain(in *jlexer.Lexer, out *VkUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "can_access_closed":
			out.CanAccessClosed = bool(in.Bool())
		case "is_closed":
			out.IsClosed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson498abbe1EncodeGithubComSepukaVkbotserverDomain(out *jwriter.Writer, in VkUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"can_access_closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanAccessClosed))
	}
	{
		const prefix string = ",\"is_closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsClosed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VkUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson498abbe1EncodeGithubComSepukaVkbotserverDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VkUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson498abbe1EncodeGithubComSepukaVkbotserverDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VkUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson498abbe1DecodeGithubComSepukaVkbotserverDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VkUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson498abbe1DecodeGithubComSepukaVkbotserverDomain(l, v)
}
func easyjson498abbe1DecodeGithubComSepukaVkbotserverDomain1(in *jlexer.Lexer, out *OauthVkTokenResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.Token = string(in.String())
		case "user_id":
			out.UserId = int(in.Int())
		case "expires_in":
			out.ExpiresIn = int32(in.Int32())
		case "email":
			out.Email = string(in.String())
		case "error":
			out.Error = string(in.String())
		case "error_description":
			out.ErrorDescription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson498abbe1EncodeGithubComSepukaVkbotserverDomain1(out *jwriter.Writer, in OauthVkTokenResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"expires_in\":"
		out.RawString(prefix)
		out.Int32(int32(in.ExpiresIn))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"error_description\":"
		out.RawString(prefix)
		out.String(string(in.ErrorDescription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OauthVkTokenResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson498abbe1EncodeGithubComSepukaVkbotserverDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OauthVkTokenResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson498abbe1EncodeGithubComSepukaVkbotserverDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OauthVkTokenResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson498abbe1DecodeGithubComSepukaVkbotserverDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OauthVkTokenResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson498abbe1DecodeGithubComSepukaVkbotserverDomain1(l, v)
}
